#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"
require "thor"
require "link_community"
require "csv"
require "json"

class CLI < Thor
  COLOR_BASE = "/set1%d/%d".freeze

  desc "csv-dot CSV_FILE", "covert CSV file to Graphviz DOT"
  def csv_dot(csv_file)
    _header, *lines = CSV.readlines(csv_file)
    lines = lines.map { |from, to, _weight| format(%(  "%s" -> "%s";), from, to) }
    lines = ["digraph G {",
             "  splines=ortho;",
             "  concentrate=true;",
             "  rankdir=BT;"] +
            lines +
            ["}"]

    dot_file = csv_file.sub(/\.csv$/, ".dot")
    File.write(dot_file, lines.join("\n"))
  end

  desc "collect SOURCE_DIR WORD", "collect dot files with word from source, copy to \"group_WORD\" dir and generate PDF"
  def collect(source_dir, word)
    dest = "group_#{word.gsub(/\W/, "_")}"
    `mkdir -p #{dest}`
    `cp $(grep -l '"#{word}"' #{source_dir}/*.dot) #{dest}`
    pdf(dest)
  end

  desc "pdf SOURCE_DIR", "generate a single PDF from a dir with dot files"
  def pdf(source_dir)
    source_dir = source_dir.gsub(%r(/$), "")
    `rm -f #{source_dir}/#{source_dir}.*`
    files = Dir.glob("#{source_dir}/*.dot")
    begin
      $stdout = open("#{source_dir}/#{source_dir}.dot", "w")
      merge(*files)
    ensure
      $stdout.close if $stdout && !$stdout.closed?
      $stdout = STDOUT
    end
    `sfdp -Tpdf -o#{source_dir}/#{source_dir}.pdf #{source_dir}/#{source_dir}.dot`
  end

  desc "merge DOT_FILES...", "Merge up to 6 dot files"
  def merge(*files)
    colors = colors_for(files)

    header = extract_header(files.first)
    footer = "}\n"

    middle = files.map { |f| extract_middle(f) }
    middle.sort_by! { |lines| lines.size }
    middle.combination(2) { |smaller, bigger| bigger.delete_if { |e| smaller.include?(e) } }
    middle.reverse!
    middle = middle.zip(colors).flat_map do |mid, color|
      color ||= "gray"
      mid.map do |line|
        if line.match?(/\]/)
          line.sub(/\]/, %(, color="#{color}"]))
        else
          line.sub(/;$/, %( [color="#{color}"];))
        end
      end
    end

    puts header
    puts middle
    puts footer
  end

  desc "cargos-norm-json-to-csv-slug JSON_FILE", "convert this to that (this should be throwaway code)"
  def cargos_norm_json_to_csv_slug(json_file)
    csv_file = json_file.sub(/\.json$/, ".csv")
    CSV.open(csv_file, "w") do |output|
      File.foreach(json_file) do |row|
        norm, name = JSON.parse(row)
        slug = name.unicode_normalize(:nfkd)
                   .gsub(/[^\x00-\x7F]/, "")
                   .downcase
                   .gsub(/[^a-z0-9]+/, " ")
                   .strip
                   .tr(" ", "-")
        output << [norm, slug, name]
      end
    end
  end

  desc "cargos-norm-edge-csv CSV_NORM CSV_EDGE_LIST", "slugfy the edge list csv"
  def cargos_norm_edge_csv(csv_norm, csv_edge)
    rslt_file = csv_edge.sub(/\.csv$/, "2.csv")
    dict = CSV.read(csv_norm).map { |norm, slug, _| [norm, slug] }.to_h
    options = {headers: %w[from to weight], write_headers: true}
    CSV.open(rslt_file, "w", options) do |output|
      CSV.table(csv_edge).each do |row|
        output << [dict.fetch(row[:from]), dict.fetch(row[:to]), row[:weight]]
      end
    end
  end

  private

  def colors_for(files)
    how_many_colors = [[3, files.size - 1].max, 9].min
    ["black"] + (1..how_many_colors).map { |i| format(COLOR_BASE, how_many_colors, i) }
  end

  def extract_header(file)
    rslt = open(File.join(Dir.pwd, file), "r") do |f|
      f.each_line.take_while { |line| line !~ /->/ }
    end
    rslt << "\toverlap = scale;"
    rslt << "\toutputorder = edgesfirst;"
    rslt << "\tnode [style=filled fillcolor=white];"
    rslt.uniq
  end

  def extract_middle(file)
    open(File.join(Dir.pwd, file), "r") do |f|
      f.each_line.select { |line| line =~ /->/ }
    end
  end
end

CLI.start(ARGV)
