#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"
require "thor"
require "link_community"
require "csv"
require "pp"

class CLI < Thor

  desc "all-the-way-down GRAPH_CSV_FILE", "Process all clusters and subclusters"
  def all_the_way_down(csv_file_name)
    root_dir = File.dirname(csv_file_name)
    process(root_dir, csv_file_name)
  ensure
    to_remove = Dir.glob("#{root_dir}/group-*.csv")
    to_remove.reject! { |f| sibling?(f, to_remove) }
    to_remove.each { |file| `rm #{file}` }
    `rm -f #{root_dir}/group-*.tree`
    `rm -f #{root_dir}/group-*.txt`
  end

  desc "split TREE_FILE", "Splits the corresponding ABC file in groups defined by TREE_FILE"
  def split(tree_file_name, csv_file_name = new_file_name(tree_file_name, "*.csv"))
    parent_group = tree_file_name[/group-\d+((?:-\d+)+)/, 1] || ""
    graph = read_graph(csv_file_name)
    tree = read_tree(tree_file_name)

    tree.each do |community, node_indexes|
      next if node_indexes.size <= 3
      subgraph = graph.subgraph_with_indexes(node_indexes)

      group_name = parent_group + "-" + community.tr(":", "-")
      file_name = format("group-%05d%s", node_indexes.size, group_name)
      edge_list_file_name = new_file_name(tree_file_name, "#{file_name}.csv")
      GraphToCsv.new(subgraph).to_csv(edge_list_file_name)
    end
  end

  desc "abc GRAPH_CSV_FILE", "Turn CSV edge file into an ABC file"
  def abc(csv_file_name)
    graph = read_graph(csv_file_name)

    tree_file_name = new_file_name(csv_file_name, "*.txt")
    open(tree_file_name, "w") do |file|
      graph.links_index.each do |link|
        file.printf("%d %d %d\n",
                    link.a,
                    link.b,
                    link.weight)
      end
    end
  end

  desc "namefy TREE_FILE GRAPH_CSV_FILE", "Replace the indexes of a .tree file with the actual names"
  def namefy(tree_file_name, csv_file_name = new_file_name(tree_file_name, "*.csv"))
    graph = read_graph(csv_file_name)

    translated_file = new_file_name(tree_file_name, "*.tree_named")
    open(translated_file, "w") do |out|
      File.foreach(tree_file_name) do |line|
        line = line.sub(/"([^"]+)"/) { %("#{graph.node_of($1.to_i)}") }
        out.puts(line)
      end
    end
  end

  desc "to-json JSON_FILE GRAPH_CSV_FILE... ", "convert graph csv files to json"
  def to_json(json_file_name, *csv_file_names)
    node_format = "  {\"id\": \"%s\", \"group\": [%s]}"
    link_format = %(  {"source": "%s", "target": "%s", "value": %d})

    groups = csv_file_names.map do |csv_file_name|
      extract_group_from_file(csv_file_name)
    end

    graphs = csv_file_names.map do |csv_file_name|
      read_graph(csv_file_name)
    end

    group_dict = groups.uniq.each_with_index.to_h

    # nodes = {node => [group, ...], ...}
    nodes = Hash.new { |h, k| h[k] = [] }
    groups.zip(graphs).each do |group, graph|
      graph.nodes.each { |node| nodes[node] << group_dict[group] }
    end

    links = graphs.flat_map(&:links_node).uniq

    open(json_file_name, "w") do |out|
      out.puts "{"

      # Nodes
      out.puts %( "nodes": [)
      head = true

      nodes.each do |node, gs|
        if head then head = false
        else out.puts(",")
        end
        out.printf(node_format, node, gs.join(", "))
      end
      out.puts %( ],)

      # Links
      out.puts %( "links": [)
      head = true
      links.each do |link|
        if head then head = false
        else out.puts(",")
        end
        out.printf(link_format, link.a, link.b, link.weight)
      end
      out.puts %( ])

      out.puts "}"
    end
  end

  private

  # removable_collector is a collecting parameter
  def process(root_dir, start_file)
    less_than_11 = less_than(11)
    to_visit = [start_file]
    visited = []
    while to_visit.any?
      file_name = to_visit.shift

      csv_to_csv(file_name)
      visited << file_name

      new_files = Dir.glob("#{root_dir}/group-*.csv")

      new_files = new_files.reject do |f|
        less_than_11.call(f) ||
          visited.include?(f) ||
          to_visit.include?(f) ||
          children?(f, new_files) ||
          !sibling?(f, new_files)
      end

      to_visit.concat(new_files)
    end
  end

  def sibling?(file, files)
    parent = file.match(/group-\d+((?:-\d+)*)-\d+\./)&.captures&.first
    brothers = files.select { |f| f.to_s.match?(/group-\d+#{parent}-/) }
    brothers.size > 1
  end

  def children?(file, files)
    me = file.match(/group-\d+((?:-\d+)*)\./)&.captures&.first
    children = files.select { |f| f.to_s.match?(/group-\d+#{me}-/) }
    children.any?
  end

  def less_than(number)
    lambda do |file_name|
      number_in_file = file_name.match(/group-(\d+)/)&.captures&.first&.to_i
      return true if number_in_file.nil?
      number_in_file < number
    end
  end

  def csv_to_csv(csv)
    txt = new_file_name(csv, "*.txt")
    tree = new_file_name(csv, "*.tree")
    root = File.dirname(csv)

    abc(csv) unless File.exist?(txt)
    `Infomap #{txt} #{root} -z -d --overlapping --tree` unless File.exist?(tree)
    split(tree) if File.exist?(tree)
  end

  def extract_group_from_file(file_name)
    group = file_name.match(/group-\d+((?:-\d+)+)/)&.captures&.first
    return nil if group.nil?
    group.sub(/^-/, "").tr("-", ":")
  end

  def extract_group_and_index(line)
    if line.match?(/^\s*#/)
      []
    else
      group, _flow, _name, index = line.chomp.split(/\s+/)
      group = group.gsub(/:[^:]+$/, "")
      [[group, index]]
    end
  end

  def read_tree(tree_file_name)
    TreeFile.read(tree_file_name)
  end

  def read_graph(csv_file_name)
    CsvToGraph.new(csv_file_name).to_graph
  end

  def new_file_name(file_name, new_name)
    match = new_name[/^\*(\.\w+)$/, 1]
    new_name = File.basename(file_name, ".*") + match if match

    File.join(File.dirname(file_name), new_name)
  end
end

CLI.start(ARGV)
